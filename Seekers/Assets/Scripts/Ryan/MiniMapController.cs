using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

//Set up a class (virtual) that indicates what we store in a map object 
public class MapObject
{
    //icon getter and setter
    public Image icon { get; set; }
    //game owner object getter and setter
    public GameObject owner { get; set; }
}

public class MiniMapController : MonoBehaviour
{
    //Get the player position
    [SerializeField]
    public Transform playerPos;
    
    //Decide which camera we use for the minimap
    [SerializeField]
    public Camera mapCamera;

    private Canvas canvas;
    //Create a list to store map objects by the class we created above
    private static List<MapObject> mapObjectList = new List<MapObject>();

    //Stuff map objects into the mapObjectList
    public static void RegisterMapObject(GameObject a_gameObject, Image a_image)
    {
        //Instantiate the image that we assigned in MakeMapObject
        //Store the instantiated image as a variable
        Image image = Instantiate(a_image);
        //Stuff the set (gameObject, image) into the mapObjectList
        mapObjectList.Add(new MapObject() { owner = a_gameObject, icon = image });
    }

    //if the object is destroyed, Remove the object from the list
    //ex: items the generated by the spawners
    public static void RemoveMapObject(GameObject a_gameObject)
    {
        //Create a temp list to store the objects that we "DO NOT" want to destroy
        List<MapObject> tempList = new List<MapObject>();

        //scan through the mapObjectList
        for (int i = 0; i < mapObjectList.Count; i++)
        {
            //if the object matches the object we want to destroy
            if (mapObjectList[i].owner == a_gameObject)
            {
                //destroy it's icon
                //P.S. we don't destroy the gameObject because it has been destryed
                //by it's original destroy function
                Destroy(mapObjectList[i].icon);
                //continue so when the loop won't stop here
                continue;
            }
            else //else we add the object we don't destroy to the new list
            {
                tempList.Add(mapObjectList[i]);
            } 
        }
        //wipe out all the content in mapObjectList
        mapObjectList.RemoveRange(0, mapObjectList.Count);
        //copy all the content of tempList to mapObjectList
        mapObjectList.AddRange(tempList);

        //when function ends, tempList will be destroyed automatically
    }

    //Render all map icons
    void DrawMapIcons()
    {
        //for each...we draw every object
        foreach (MapObject mapObject in mapObjectList)
        {
            //set up the relative position bewteen map object and the map camera
            //the range will between 0~1 because of WorldToViewportPoint's nature
            Vector3 screenPos = mapCamera.WorldToViewportPoint(mapObject.owner.transform.position);
            //parent the object to the mini map rectangle
             mapObject.icon.transform.SetParent(transform);
            //get the rectangle transform
            RectTransform rectTrans = GetComponent<RectTransform>();

            //get position of four corners of the rectangle
            //and store them into an array
            Vector3[] corners = new Vector3[4];
            rectTrans.GetWorldCorners(corners);

            //Set up the width and height ration by rectangle's width and height times canvas' factor,
            //then devided by Screen's width and height
            float widthRatio = (rectTrans.rect.width * canvas.scaleFactor) / Screen.width;
            float heightRatio = (rectTrans.rect.height * canvas.scaleFactor) / Screen.height;

            //blow the x and y up by ration of the height and width to the screen
            //plus the length from the corner of the whole screen to the corner 0 of the rectangle
            screenPos.x = screenPos.x * Screen.width * widthRatio + corners[0].x;
            screenPos.y = screenPos.y * Screen.height * heightRatio + corners[0].y;

            //always display the icons most front to any other UI object
            screenPos.z = 0;
            //aplly screen pos to object's icon position
            mapObject.icon.transform.position = screenPos;
        }
    }

    private void Start()
    {
        canvas = transform.parent.GetComponent<Canvas>();
    }
    void Update()
    {
        //draw map in update
        DrawMapIcons();
    }
}
